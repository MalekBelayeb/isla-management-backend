// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  agent
  admin
}

enum OwnerType {
  natural
  legal
}

enum NationalityType {
  tn
  dz
  ly
  others
}

enum PropertyType {
  immeuble
  appartement
  magasin
  depot
  studio
  villa
  duplex
  terrain
  fond_de_commerce
  usine
}

enum ApartmentType {
  appartement
  studio
  cave
  etage_de_villa
  magasin
  depot
}

enum GenderType {
  M
  F
}

enum PaymentMethodType {
  cash
  check
  transfer
}

enum PaymentType {
  income
  expense
}

enum PaymentCategory {
  rent // Loyer
  deposit // Caution / Dépôt de garantie
  agency_fees // Frais d'agence
  maintenance_fees // Frais d'entretien
  utility_payments // Charges (eau, électricité, gaz, etc.)
  cleaning_fees // Frais de nettoyage
  furniture_rental_fees // Location de mobilier
  home_insurance_payment // Assurance habitation
}

enum PaymentFrequency {
  DAILY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum AgreementStatus {
  PENDING
  ACTIVE
  TERMINATED
  EXPIRED
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  firstname  String
  lastname   String
  password   String
  role       Role     @default(agent)
  createdAt  DateTime @default(now())
  isArchived Boolean  @default(false)
}

model Owner {
  id          String          @id @default(uuid())
  matricule   Int             @default(autoincrement())
  firstname   String?
  lastname    String?
  fullname    String?
  gender      GenderType?     @default(M)
  cin         String?
  email       String?
  nationality NationalityType @default(tn)
  phoneNumber String
  rib         String
  society     String?
  taxId       String?
  type        OwnerType       @default(natural)
  createdAt   DateTime        @default(now())
  isArchived  Boolean         @default(false)
  properties  Property[]
}

model Property {
  id         String       @id @default(uuid())
  matricule  Int          @default(autoincrement())
  address    String
  type       PropertyType
  ownerId    String
  owner      Owner        @relation(fields: [ownerId], references: [id])
  createdAt  DateTime     @default(now())
  isArchived Boolean      @default(false)
  apartments Apartment[]
}

model Apartment {
  id          String        @id @default(uuid())
  matricule   Int           @default(autoincrement())
  address     String
  type        ApartmentType
  description String
  price       Float         @default(0)
  rooms       Int?
  createdAt   DateTime      @default(now())
  isArchived  Boolean       @default(false)
  propertyId  String
  property    Property      @relation(fields: [propertyId], references: [id])
  agreements  Agreement[]
  Payment     Payment[]
}

model Tenant {
  id          String      @id @default(uuid())
  matricule   Int         @default(autoincrement())
  firstname   String
  lastname    String
  fullname    String      @default("")
  email       String      @default("")
  gender      GenderType  @default(M)
  cin         String
  phoneNumber String
  nationality String
  address     String      @default("")
  job         String      @default("")
  createdAt   DateTime    @default(now())
  isArchived  Boolean     @default(false)
  agreements  Agreement[]
  Payment     Payment[]
}

model Agreement {
  id                String           @id @default(uuid())
  matricule         String
  rentAmount        Decimal
  deposit           Decimal? // optional amount paid as deposit (caution).
  firstDayOfPayment DateTime?
  paymentFrequency  PaymentFrequency @default(MONTHLY)
  startDate         DateTime
  expireDate        DateTime
  signedAt          DateTime?        @default(now())
  terminatedAt      DateTime?
  terminationReason String?
  status            AgreementStatus  @default(ACTIVE)
  notes             String?
  documentUrl       String?
  isArchived        Boolean          @default(false)
  createdAt         DateTime         @default(now())
  apartmentId       String
  apartment         Apartment        @relation(fields: [apartmentId], references: [id])
  tenantId          String
  tenant            Tenant           @relation(fields: [tenantId], references: [id])
  payments          Payment[]
}

model Payment {
  id          String            @id @default(uuid())
  amount      Decimal
  paymentDate DateTime          @default(now())
  category    PaymentCategory
  type        PaymentType
  method      PaymentMethodType
  notes       String            @default("")
  createdAt   DateTime          @default(now())
  isArchived  Boolean           @default(false)
  agreement   Agreement         @relation(fields: [agreementId], references: [id])
  agreementId String
  Apartment   Apartment?        @relation(fields: [apartmentId], references: [id])
  apartmentId String?
  Tenant      Tenant?           @relation(fields: [tenantId], references: [id])
  tenantId    String?
}
